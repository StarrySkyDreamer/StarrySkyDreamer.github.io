<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang基础</title>
      <link href="/2023/03/26/Golang%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/26/Golang%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><h3 id="整数格式化"><a href="#整数格式化" class="headerlink" title="整数格式化"></a>整数格式化</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%b</td><td>整型以二进制方式显示</td></tr><tr><td>%o</td><td>整型以八进制方式显示</td></tr><tr><td>%d</td><td>整型以十进制方式显示</td></tr><tr><td>%x</td><td>整型以十六进制方式显示</td></tr><tr><td>%X</td><td>整型以十六进制、字母大写方式显示</td></tr><tr><td>%c</td><td>相应Unicode码点所表示的字符</td></tr><tr><td>%U</td><td>Unicode 字符, Unicode格式：123，等同于 “U+007B”</td></tr></tbody></table><span id="more"></span><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">255</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;二进制: %b\n&quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;八进制: %o\n&quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;十进制: %d\n&quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;十六进制: %x\n&quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;大写十六进制: %X\n&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;十六进制: %d\n&quot;</span>, Hex2Dec(<span class="string">&quot;4E2D&quot;</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;字符: %c\n&quot;</span>, <span class="number">20013</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Unicode格式: %U\n&quot;</span>, <span class="string">&#x27;中&#x27;</span>) <span class="comment">// U+4E2D</span></span><br></pre></td></tr></table></figure><h3 id="浮点数格式化"><a href="#浮点数格式化" class="headerlink" title="浮点数格式化"></a>浮点数格式化</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%e</td><td>科学计数法，例如 -1234.456e+78</td></tr><tr><td>%E</td><td>科学计数法，例如 -1234.456E+78</td></tr><tr><td>%f</td><td>有小数点而无指数，例如 123.456</td></tr><tr><td>%g</td><td>根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td></tr><tr><td>%G</td><td>根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%e&quot;</span>, <span class="number">12675757563.5345432567</span>) <span class="comment">//1.267576e+10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%E&quot;</span>, <span class="number">12675757563.5345432567</span>) <span class="comment">// 1.267576E+10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%f&quot;</span>, <span class="number">12675757563.5345432567</span>) <span class="comment">// 12675757563.534544</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%g&quot;</span>, <span class="number">12675757563.5345432567</span>) <span class="comment">// 1.2675757563534544e+10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%G&quot;</span>, <span class="number">12675757563.5345432567</span>) <span class="comment">// 1.2675757563534544E+1</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型格式化"><a href="#布尔类型格式化" class="headerlink" title="布尔类型格式化"></a>布尔类型格式化</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%t</td><td>true 或 false</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%t&quot;</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%s</td><td>字符串或切片的无解译字节</td></tr><tr><td>%q</td><td>双引号围绕的字符串，由Go语法安全地转义</td></tr><tr><td>%x</td><td>十六进制，小写字母，每字节两个字符</td></tr><tr><td>%X</td><td>十六进制，大写字母，每字节两个字符</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">&quot;I&#x27;m a boy&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, str) <span class="comment">//I&#x27;m a boy</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, str) <span class="comment">//&quot;I&#x27;m a boy&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, str) <span class="comment">//49276d206120626f79</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%X\n&quot;</span>, str) <span class="comment">//49276D206120626F79</span></span><br></pre></td></tr></table></figure><h3 id="指针格式化"><a href="#指针格式化" class="headerlink" title="指针格式化"></a>指针格式化</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%p</td><td>十六进制表示，前缀 0x</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="string">&quot;I&#x27;m a boy&quot;</span></span><br><span class="line">b := &amp;a</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p&quot;</span>, b)  <span class="comment">//0x14000010270</span></span><br></pre></td></tr></table></figure><h3 id="通用的占位符"><a href="#通用的占位符" class="headerlink" title="通用的占位符"></a>通用的占位符</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%v</td><td>值的默认格式。</td></tr><tr><td>%+v</td><td>类似%v，但输出结构体时会添加字段名</td></tr><tr><td>%#v</td><td>相应值的Go语法表示</td></tr><tr><td>%T</td><td>相应值的类型的Go语法表示</td></tr><tr><td>%%</td><td>百分号,字面上的%,非占位符含义</td></tr></tbody></table><blockquote><p>默认格式<code>%v</code>下，对于不同的数据类型，底层会去调用默认的格式化方式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span>:                    %t </span><br><span class="line"><span class="type">int</span>, <span class="type">int8</span> etc.:          %d </span><br><span class="line"><span class="type">uint</span>, <span class="type">uint8</span> etc.:        %d, %x <span class="keyword">if</span> printed with %#v</span><br><span class="line"><span class="type">float32</span>, <span class="type">complex64</span>, etc: %g</span><br><span class="line"><span class="type">string</span>:                  %s</span><br><span class="line"><span class="keyword">chan</span>:                    %p </span><br><span class="line">pointer:                 %p</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f := <span class="number">1010.0101</span></span><br><span class="line">s := <span class="string">&quot;hey boy!&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, f) <span class="comment">//1010.0101</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s) <span class="comment">//hey boy!</span></span><br></pre></td></tr></table></figure><blockquote><p>如果是复杂对象的话,按照如下规则进行打印：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span>:            &#123;field0 field1 ...&#125; </span><br><span class="line">array, slice:      [elem0 elem1 ...] </span><br><span class="line">maps:              <span class="keyword">map</span>[key1:value1 key2:value2] </span><br><span class="line">pointer to above:  &amp;&#123;&#125;, &amp;[], &amp;<span class="keyword">map</span>[]</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;<span class="string">&quot;laowang&quot;</span>, <span class="number">33</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v&quot;</span>, user) <span class="comment">// Go默认形式 &#123;laowang 33&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v&quot;</span>, user) <span class="comment">//类型+值对象 day2.User&#123;Name:&quot;laowang&quot;, Age:33&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v&quot;</span>, user) <span class="comment">//输出字段名和字段值形式 &#123;Name:laowang Age:33&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, user) <span class="comment">//值类型的Go语法表示形式, day2.User</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%%&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h3><h4 id="字符串宽度控制"><a href="#字符串宽度控制" class="headerlink" title="字符串宽度控制"></a>字符串宽度控制</h4><blockquote><p>宽度设置格式: 占位符中间加一个数字, 数字分正负, +: 右对齐, -: 左对齐<br>最小宽度, 不够部分可以选择补0</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;|%s|&quot;</span>, <span class="string">&quot;aa&quot;</span>) <span class="comment">// 不设置宽度</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%5s|&quot;</span>, <span class="string">&quot;aa&quot;</span>) <span class="comment">// 5个宽度,  默认+， 右对齐</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%-5s|&quot;</span>, <span class="string">&quot;aa&quot;</span>) <span class="comment">// 5个宽度, 左对齐</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%05s|&quot;</span>, <span class="string">&quot;aa&quot;</span>) <span class="comment">// |000aa|</span></span><br></pre></td></tr></table></figure><blockquote><p>最大宽度, 超出的部分会被截断</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;|%.5s|&quot;</span>, <span class="string">&quot;xxxx&quot;</span>) <span class="comment">// 最大宽度为5</span></span><br></pre></td></tr></table></figure><h4 id="浮点数精度控制"><a href="#浮点数精度控制" class="headerlink" title="浮点数精度控制"></a>浮点数精度控制</h4><blockquote><p>可以指定浮点型的输出宽度，同时也可以通过 宽度.精度 的语法来指定输出的精度</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">54.123456</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%f|&quot;</span>, a)  <span class="comment">// |54.123456|</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%5.1f|&quot;</span>, a)  <span class="comment">// | 54.1|</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%-5.1f|&quot;</span>, a) <span class="comment">// |54.1 |</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;|%05.1f|&quot;</span>, a) <span class="comment">// |054.1|</span></span><br></pre></td></tr></table></figure><blockquote><p>不同语言的文字宽度并不一定相同, 比如</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;|%2s|&quot;</span>, <span class="string">&quot;中国&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;|%2s|&quot;</span>, <span class="string">&quot;ab&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="格式化错误"><a href="#格式化错误" class="headerlink" title="格式化错误"></a>格式化错误</h3><blockquote><p>类型错误或未知: <code>%!verb(type=value)</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Printf(<span class="string">&quot;%d&quot;</span>, <span class="string">&quot;hi&quot;</span>) <span class="comment">// %!d(string=hi)</span></span><br></pre></td></tr></table></figure><blockquote><p>太多参数: <code>%!(EXTRA type=value)</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Printf(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;guys&quot;</span>) <span class="comment">// hi%!(EXTRA string=guys)</span></span><br></pre></td></tr></table></figure><blockquote><p>太少参数: %!verb(MISSING)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Printf(<span class="string">&quot;hi%d&quot;</span>) <span class="comment">// hi %!d(MISSING)</span></span><br></pre></td></tr></table></figure><blockquote><p>宽度&#x2F;精度不是整数值: %!(BADWIDTH) or %!(BADPREC)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Printf(<span class="string">&quot;%d&quot;</span>, hi) <span class="comment">// %!d(string=hi)</span></span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><table><thead><tr><th>位运算符号</th><th>解释</th></tr></thead><tbody><tr><td>&amp;</td><td>两数各对应的二进位相与</td></tr><tr><td>｜</td><td>两数各对应的二进位相或</td></tr><tr><td>^</td><td>两数各对应的二进位相异或，当两对应的二进位相异时，结果为1</td></tr><tr><td>&lt;&lt;</td><td>左移n位就是乘以2的n次方</td></tr><tr><td>&gt;&gt;</td><td>右移n位就是除以2的n次方</td></tr></tbody></table><h3 id="位相与"><a href="#位相与" class="headerlink" title="位相与"></a>位相与</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> a := <span class="number">1</span>             <span class="comment">//二进制  0001</span></span><br><span class="line">c := <span class="number">2</span>             <span class="comment">//二进制  0010</span></span><br><span class="line">d := <span class="number">3</span>             <span class="comment">//二进制  0011</span></span><br><span class="line">b := <span class="number">10</span>            <span class="comment">//二进制  1010</span></span><br><span class="line">fmt.Println(a &amp; b) <span class="comment">//0001 1010  echo 二进制  0000  十进制   0</span></span><br><span class="line">fmt.Println(c &amp; b) <span class="comment">//0010 1010  echo 二进制  0010  十进制   2  </span></span><br><span class="line">fmt.Println(d &amp; b) <span class="comment">//0011 1010  echo 二进制  0010  十进制   2  </span></span><br></pre></td></tr></table></figure><blockquote><p>从上可以发现  两对应的二进位相应时取值</p></blockquote><h3 id="位相或"><a href="#位相或" class="headerlink" title="位相或"></a>位相或</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> a := <span class="number">1</span>           <span class="comment">//二进制  0001</span></span><br><span class="line">c := <span class="number">2</span>           <span class="comment">//二进制  0010</span></span><br><span class="line">d := <span class="number">3</span>           <span class="comment">//二进制  0011</span></span><br><span class="line">b := <span class="number">10</span>          <span class="comment">//二进制  1010</span></span><br><span class="line">fmt.Println(a | b) <span class="comment">//0001 1010  echo 二进制  1011  十进制   11</span></span><br><span class="line">fmt.Println(c | b) <span class="comment">//0010 1010  echo 二进制  1010  十进制   10</span></span><br><span class="line">fmt.Println(d | b) <span class="comment">//0011 1010  echo 二进制  1011  十进制   11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>从上可以发现 两对应的二进位相对应时取值,相异时补1</p></blockquote><h3 id="相异或"><a href="#相异或" class="headerlink" title="相异或"></a>相异或</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> a := <span class="number">1</span>             <span class="comment">//二进制  0001</span></span><br><span class="line">c := <span class="number">2</span>             <span class="comment">//二进制  0010</span></span><br><span class="line">d := <span class="number">3</span>             <span class="comment">//二进制  0011</span></span><br><span class="line">b := <span class="number">10</span>            <span class="comment">//二进制  1010</span></span><br><span class="line">fmt.Println(a ^ b) <span class="comment">//0001 1010  echo 二进制  1011  十进制   11</span></span><br><span class="line">fmt.Println(c ^ b) <span class="comment">//0010 1010  echo 二进制  1000  十进制   8</span></span><br><span class="line">fmt.Println(d ^ b) <span class="comment">//0011 1010  echo 二进制  1001  十进制   9</span></span><br></pre></td></tr></table></figure><blockquote><p>从上可以发现,两对应的二进位相异时补1,相对应时为0</p></blockquote><h3 id="左移运算"><a href="#左移运算" class="headerlink" title="左移运算"></a>左移运算</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a :=<span class="number">1</span>  <span class="comment">//二进制  0001</span></span><br><span class="line">fmt.Println(a &lt;&lt; <span class="number">3</span>) <span class="comment">//二进制  1000  十进制   8   1*2*2*2</span></span><br><span class="line">a :=<span class="number">2</span></span><br><span class="line">fmt.Println(a &lt;&lt; <span class="number">3</span>)<span class="comment">//二进制   10000 十进制   16  2*2*2*2</span></span><br></pre></td></tr></table></figure><blockquote><p>从上可以发现，左移n位就是乘以2的n次方</p></blockquote><h3 id="右移运算"><a href="#右移运算" class="headerlink" title="右移运算"></a>右移运算</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">3</span> <span class="comment">//二进制  0011</span></span><br><span class="line">fmt.Println(a &gt;&gt; <span class="number">1</span>) <span class="comment">//二进制 0001 十进制  1</span></span><br><span class="line">fmt.Println(a &gt;&gt; <span class="number">2</span>)<span class="comment">//二进制 0000  十进制  0</span></span><br><span class="line">fmt.Println(a &gt;&gt; <span class="number">3</span>)<span class="comment">//二进制 0000  十进制  0</span></span><br></pre></td></tr></table></figure><blockquote><p>从上可以发现，右移n位就是除以2的n次方</p></blockquote><h2 id="Slice-切片"><a href="#Slice-切片" class="headerlink" title="Slice 切片"></a>Slice 切片</h2><h3 id="声明与赋值"><a href="#声明与赋值" class="headerlink" title="声明与赋值"></a>声明与赋值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = <span class="built_in">make</span>([]<span class="type">int</span>)   <span class="comment">//基本声明表达式 len==0  cap==0 </span></span><br><span class="line"><span class="keyword">var</span> slice = <span class="built_in">make</span>([]<span class="keyword">type</span>,<span class="built_in">len</span>,<span class="built_in">cap</span>)  <span class="comment">//完整声明表达式  type==类型   len==长度 cap==容量</span></span><br><span class="line"><span class="keyword">var</span> demo  = <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>,<span class="number">10</span>)   <span class="comment">//这样也可以但是默认  len==0  cap==0 </span></span><br><span class="line">a :=[]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;   <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;   <span class="comment">//数组赋值给切片</span></span><br><span class="line">b  := a[:]  </span><br><span class="line">C  := b</span><br><span class="line">c[<span class="number">1</span>] =<span class="number">100</span>   <span class="comment">//b和c的切片都是同一个底层数组  这个时候b[1]也是 100  如果不想同一个数组底层需要使用内置函数copy(destSlice,Silce []T)</span></span><br></pre></td></tr></table></figure><blockquote><p>1.切片的本质就是对底层数组的封装，它包含了三个信息：底层数组的指针、切片的长度（len）和切片的容量（cap）。<br>2.对于数组，指向数组的指针，或切片a(注意不能是字符串)支持完整切片表达式<br>3.数组赋值给切片后 ,切片任何的操作都不会影响原数组<br>4.两个切片共享一个底层数组,任何一个有改动另一个也会受到影响</p></blockquote><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">copy</span>(b, a) <span class="comment">//使用copy()函数将切片a中的元素复制到切片b</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a切片的数据是:%v,切片的地址是:%p\n&quot;</span>, a, &amp;a) <span class="comment">//a切片的数据是:[1 2 3 4 5],切片的地址是:0x1400000c030</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;b切片的数据是:%v,切片的地址是:%p\n&quot;</span>, b, &amp;b)<span class="comment">//b切片的数据是:[100 2 3 4 5],切片的地址是:0x1400000c048</span></span><br></pre></td></tr></table></figure><blockquote><p>copy 函数会重新开辟处新的内存,两个数据值改变互不影响</p></blockquote><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slices := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">slices = <span class="built_in">append</span>(slices, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>append内置函数实现了自动扩容策略</p></blockquote><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">a = a[<span class="number">2</span>:]  <span class="comment">//echo  [3 4 5]</span></span><br><span class="line"></span><br><span class="line">b := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">b = b[:<span class="number">1</span>]  <span class="comment">//echo  1</span></span><br><span class="line"></span><br><span class="line">c := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">c := c[<span class="number">2</span>:<span class="number">3</span>] <span class="comment">//echo 3</span></span><br></pre></td></tr></table></figure><blockquote><p>总结  : 左边不包含  右边包含  so 左闭右合</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h3><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数)</span></span>(返回值)&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x,y <span class="type">int</span> )</span></span><span class="type">int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NoReturn</span><span class="params">(x,y <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">  fmt.Print(x,y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x,y <span class="type">int</span>)</span></span>(<span class="type">int</span>,<span class="type">int</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> x , y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(x ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Println(x) <span class="comment">//x是一个切片</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">sum = sum + v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意的是可变参数是切片  需要特殊处理</p><p>可变参数通常要作为函数的最后一个参数。</p></blockquote><h4 id="可变参数的调用"><a href="#可变参数的调用" class="headerlink" title="可变参数的调用"></a>可变参数的调用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ret5 := Sum(<span class="number">100</span>)</span><br><span class="line">ret6 := Sum(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">ret7 := Sum(<span class="number">100</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">ret8 := Sum(<span class="number">100</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">fmt.Println(ret5, ret6, ret7, ret8) <span class="comment">//100 110 130 160</span></span><br></pre></td></tr></table></figure><h3 id="函数类型与变量"><a href="#函数类型与变量" class="headerlink" title="函数类型与变量"></a>函数类型与变量</h3><h4 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> calculation <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span></span><span class="type">int</span></span><br></pre></td></tr></table></figure><blockquote><p>上面语句定义了一个<code>calculation</code>类型，它是一种函数类型，这种函数接收两个int类型的参数并且返回一个int类型的返回值。</p><p>满足类似    func  FuncName (x,y int) z  就可以使用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c calculation</span><br><span class="line">  c = add</span><br><span class="line">  fmt.Print(c(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line">  </span><br><span class="line">  d := sub</span><br><span class="line">  fmt.Print(<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(x, y <span class="type">int</span>, op <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> op(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sud</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test := calc(<span class="number">10</span>, <span class="number">29</span>, add)</span><br><span class="line">fmt.Println(test) <span class="comment">//30</span></span><br></pre></td></tr></table></figure><h4 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(x <span class="type">string</span>)</span></span> (<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> add, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> sud, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">err := errors.New(<span class="string">&quot;哈哈哈&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sud</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DoNum, _ := do(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">fmt.Println(DoNum(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">//30</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><h4 id="匿名函数保存到变量"><a href="#匿名函数保存到变量" class="headerlink" title="匿名函数保存到变量"></a>匿名函数保存到变量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adds := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(adds(<span class="number">10</span>, <span class="number">30</span>)) <span class="comment">//30</span></span><br></pre></td></tr></table></figure><h4 id="自运行匿名函数"><a href="#自运行匿名函数" class="headerlink" title="自运行匿名函数"></a>自运行匿名函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(test) <span class="comment">//30</span></span><br></pre></td></tr></table></figure><h3 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h3><blockquote><p>闭包 &#x3D; 函数 + 引用环境(匿名函数引用了外部的变量)</p></blockquote><h4 id="简单闭包函数"><a href="#简单闭包函数" class="headerlink" title="简单闭包函数"></a>简单闭包函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x += y</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = adder(<span class="number">10</span>)</span><br><span class="line">fmt.Println(f(<span class="number">10</span>)) <span class="comment">//20</span></span><br><span class="line">fmt.Println(f(<span class="number">20</span>)) <span class="comment">//40</span></span><br><span class="line">fmt.Println(f(<span class="number">30</span>)) <span class="comment">//70</span></span><br></pre></td></tr></table></figure><h4 id="升级版闭包函数"><a href="#升级版闭包函数" class="headerlink" title="升级版闭包函数"></a>升级版闭包函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixFunc</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//strings.HasSuffix 检查原始字符串是否以指定的后缀结尾</span></span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line">Error := <span class="string">&quot;这是一个执行错误的逻辑&quot;</span></span><br><span class="line"><span class="keyword">return</span> Error</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> makeFile = makeSuffixFunc(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">fmt.Println(makeFile(<span class="string">&quot;这是一个测试文件&quot;</span>)) <span class="comment">//这是一个测试文件.jpg</span></span><br><span class="line">fmt.Println(makeFile(<span class="string">&quot;这是一个测试文件.jpg&quot;</span>)) <span class="comment">//这是一个执行错误的逻辑</span></span><br></pre></td></tr></table></figure><h4 id="终极版本闭包函数"><a href="#终极版本闭包函数" class="headerlink" title="终极版本闭包函数"></a>终极版本闭包函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calcs</span><span class="params">(base <span class="type">int</span>)</span></span> (<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span>, <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span>) &#123;</span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">base += i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">base -= i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1, f2 := Calcs(<span class="number">10</span>)</span><br><span class="line">fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) <span class="comment">//11 9</span></span><br><span class="line">fmt.Println(f1(<span class="number">3</span>), f2(<span class="number">4</span>)) <span class="comment">//12 8</span></span><br><span class="line">fmt.Println(f1(<span class="number">5</span>), f2(<span class="number">6</span>)) <span class="comment">//13 7</span></span><br></pre></td></tr></table></figure><h2 id="指针-pointer"><a href="#指针-pointer" class="headerlink" title="指针(pointer)"></a>指针(pointer)</h2><blockquote><p>区别于C&#x2F;C++中的指针，Go语言中的指针不能进行偏移和运算，是安全指针</p><p>取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值</p><p> Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型 如 *int</p></blockquote><h3 id="初始化和赋值"><a href="#初始化和赋值" class="headerlink" title="初始化和赋值"></a>初始化和赋值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a *<span class="type">int</span></span><br><span class="line">a = <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line">*a = <span class="number">10</span></span><br><span class="line"><span class="comment">//或者简写</span></span><br><span class="line">a:= <span class="built_in">new</span>(<span class="type">int</span>)</span><br></pre></td></tr></table></figure><h3 id="指针取值"><a href="#指针取值" class="headerlink" title="指针取值"></a>指针取值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针取值</span></span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := &amp;a <span class="comment">// 取变量a的地址，将指针保存到b中</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;type of b:%T\n&quot;</span>, b)  <span class="comment">//type of b:*int</span></span><br><span class="line">c := *b <span class="comment">// 指针取值（根据指针去内存取值）</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;type of c:%T\n&quot;</span>, c) <span class="comment">//type of c:int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;value of c:%v\n&quot;</span>, c) <span class="comment">//value of c:10</span></span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="类型别名和自定义类型"><a href="#类型别名和自定义类型" class="headerlink" title="类型别名和自定义类型"></a>类型别名和自定义类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将MyInt定义为int类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span></span><br><span class="line"><span class="comment">//给int类型取别名</span></span><br><span class="line"><span class="keyword">type</span> MyAliasInt = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span>  a Myint</span><br><span class="line">  <span class="keyword">var</span>  b MyAliasInt</span><br><span class="line">  fmt.Prinln(<span class="string">&quot;%T&quot;</span>,a)  <span class="comment">//main.Myint</span></span><br><span class="line">  fmt.Prinln(<span class="string">&quot;%T&quot;</span>,b) <span class="comment">//int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果显示a的类型是<code>main.MyInt</code>，表示main包下定义的<code>MyInt</code>类型。b的类型是<code>int</code>。<code>MyAliasInt</code>类型只会在代码中存在，编译完成时并不会有<code>MyAliasInt</code>类型。</p></blockquote><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><blockquote><p>Go语言中通过<code>struct</code>来实现面向对象<br>结构体也是一种类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li><li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li><li>字段类型：表示结构体字段的具体类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">city <span class="type">string</span></span><br><span class="line">age  <span class="type">int8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h3><h4 id="键值对初始化"><a href="#键值对初始化" class="headerlink" title="键值对初始化"></a>键值对初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p5 := person&#123;</span><br><span class="line">name: <span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">city: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p5=%#v\n&quot;</span>, p5) <span class="comment">//p5=main.person&#123;name:&quot;小王子&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br></pre></td></tr></table></figure><h4 id="指针进行键值对初始化"><a href="#指针进行键值对初始化" class="headerlink" title="指针进行键值对初始化"></a>指针进行键值对初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p6 := &amp;person&#123;</span><br><span class="line">name: <span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">city: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p6=%#v\n&quot;</span>, p6) <span class="comment">//p6=&amp;main.person&#123;name:&quot;小王子&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p7 := &amp;person&#123;</span><br><span class="line">city: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p7=%#v\n&quot;</span>, p7) <span class="comment">//p7=&amp;main.person&#123;name:&quot;&quot;, city:&quot;北京&quot;, age:0&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>初始化结构体的时候可以简写，也就是初始化的时候不写键</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p8 := &amp;person&#123;</span><br><span class="line"><span class="string">&quot;沙河娜扎&quot;</span>,</span><br><span class="line"><span class="string">&quot;北京&quot;</span>,</span><br><span class="line"><span class="number">28</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p8=%#v\n&quot;</span>, p8) <span class="comment">//p8=&amp;main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:28&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用这种格式初始化时，需要注意：</p></blockquote><ol><li>必须初始化结构体的所有字段。</li><li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li><li>该方式不能和键值初始化方式混用</li></ol><h3 id="结构体实例化"><a href="#结构体实例化" class="headerlink" title="结构体实例化"></a>结构体实例化</h3><h4 id="基本实例化"><a href="#基本实例化" class="headerlink" title="基本实例化"></a>基本实例化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 结构体实例 结构体类型</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">city <span class="type">string</span></span><br><span class="line">age  <span class="type">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">p1.name = <span class="string">&quot;沙河娜扎&quot;</span></span><br><span class="line">p1.city = <span class="string">&quot;北京&quot;</span></span><br><span class="line">p1.age = <span class="number">18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%v\n&quot;</span>, p1)  <span class="comment">//p1=&#123;沙河娜扎 北京 18&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%#v\n&quot;</span>, p1) <span class="comment">//p1=main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h4><blockquote><p>临时数据结构等场景下还可以使用匿名结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user <span class="keyword">struct</span>&#123;Name <span class="type">string</span>; Age <span class="type">int</span>&#125;</span><br><span class="line">   user.Name = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">   user.Age = <span class="number">18</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, user)</span><br></pre></td></tr></table></figure><h4 id="指针类型结构体"><a href="#指针类型结构体" class="headerlink" title="指针类型结构体"></a>指针类型结构体</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">new</span>(person)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p2=%#v\n&quot;</span>, p2) <span class="comment">//p2=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br><span class="line"></span><br><span class="line">p2.name = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">p2.age = <span class="number">28</span></span><br><span class="line">p2.city = <span class="string">&quot;上海&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p2=%#v\n&quot;</span>, p2) <span class="comment">//p2=&amp;main.person&#123;name:&quot;小王子&quot;, city:&quot;上海&quot;, age:28&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, p2)     <span class="comment">//*main.person</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>指针类型结构体  使用new关键字实例化</p></blockquote><h4 id="取结构体的地址实例化"><a href="#取结构体的地址实例化" class="headerlink" title="取结构体的地址实例化"></a>取结构体的地址实例化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p3 := &amp;person&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, p3)     <span class="comment">//*main.person</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p3=%#v\n&quot;</span>, p3) <span class="comment">//p3=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br><span class="line">p3.name = <span class="string">&quot;七米&quot;</span></span><br><span class="line">p3.age = <span class="number">30</span></span><br><span class="line">p3.city = <span class="string">&quot;成都&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p3=%#v\n&quot;</span>, p3) <span class="comment">//p3=&amp;main.person&#123;name:&quot;七米&quot;, city:&quot;成都&quot;, age:30&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意  不同类型的结构体不能比较，同一类型的结构体只能比较值 可以使用 reflect 包中的 DeepEqual 函数进行比较</p></blockquote><h4 id="结构体内存优化"><a href="#结构体内存优化" class="headerlink" title="结构体内存优化"></a>结构体内存优化</h4><p>在 Go 语言中，结构体的大小不仅会影响内存占用，还会影响结构体的性能。因此，合理地调整结构体的字段顺序可以优化结构体的大小，从而提高程序的运行效率。以下是一些常用的结构体字段调整技巧：</p><ol><li>将大小相同的字段放在一起：由于 Go 语言的对齐规则，结构体中大小相同的字段可以共享同一块内存区域，因此将它们放在一起可以减少结构体的总大小。</li><li>把频繁访问的字段放在一起：如果结构体中有一些字段会被频繁地访问，那么将它们放在一起可以提高 CPU 缓存的命中率，从而提高程序的运行效率。</li><li>避免在字段之间留空：Go 语言的对齐规则要求结构体的每个字段都必须按照自然对齐方式来布局，因此在字段之间留空会导致浪费空间。如果需要在字段之间留出空间，可以使用 padding 字段来实现。</li><li>使用小尺寸的数据类型：如果一个字段的取值范围很小，那么可以考虑使用大小更小的数据类型来表示该字段，例如使用 int8 来代替 int32。</li><li>优先考虑内存对齐：在进行结构体字段调整时，优先考虑 Go 语言的内存对齐规则，确保结构体的总大小是最小的。</li></ol><p>需要注意的是，结构体的字段顺序不仅会影响其大小和性能，还会影响其可读性和可维护性。因此，在进行结构体字段调整时，需要权衡各种因素，并选择最适合当前情况的方案。</p><p>1.空结构体（没有定义任何成员变量）的大小为 0 字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmptyStruct <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">fmt.Println(unsafe.Sizeof(EmptyStruct&#123;&#125;)) <span class="comment">// 输出 0</span></span><br></pre></td></tr></table></figure><p>2.包含 bool 类型成员变量的结构体的大小为 1 字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BoolStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Flag <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(unsafe.Sizeof(BoolStruct&#123;&#125;)) <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure><p>3.包含 int 类型成员变量的结构体的大小与平台有关，一般为 4 或 8 字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IntStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Num <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(unsafe.Sizeof(IntStruct&#123;&#125;)) <span class="comment">// 输出 8（在 64 位平台上）</span></span><br></pre></td></tr></table></figure><p>4.包含字符串类型成员变量的结构体的大小为一个指针的大小，通常为 8 字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StringStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(unsafe.Sizeof(StringStruct&#123;&#125;)) <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><p>5.包含数组类型成员变量的结构体的大小为数组元素大小的倍数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ArrayStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(unsafe.Sizeof(ArrayStruct&#123;&#125;)) <span class="comment">// 输出 80</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，由于 Go 语言的内存对齐规则，结构体的大小可能会大于其成员变量的大小之和。因此，在计算结构体的大小时，需要考虑内存对齐的影响</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
